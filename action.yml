name: Verify and update version
author: Colin Parsons
description:
  Verify the version tag and release name are valid, and update the major
  version tag, when there's a new latest release.
branding:
  icon: tag
  color: blue

runs:
  using: composite

  # it's also annoying that we can't set the default shell for a composite
  # action, so we have to set shell: bash for every step
  # https://github.com/orgs/community/discussions/46670

  steps:
    - name: Get latest release
      shell: bash
      # we want to get the latest release, to see if the release that triggered
      # this action is the latest release
      # https://docs.github.com/en/rest/releases/releases?apiVersion=2022-11-28#get-the-latest-release
      id: latest
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        res=$( \
          gh api \
          -X GET \
          -H "Accept: application/vnd.github+json" \
          repos/${{ github.repository }}/releases/latest \
        )
        release=$(echo $res | jq -r '.tag_name')
        echo "release=$release" >> $GITHUB_OUTPUT

    - name: Check whether this release is the latest release
      shell: bash
      # since we can't just manually exit the action without failing if a
      # particular step fails, we have to feed this step as input to all
      # following steps
      # https://github.com/actions/runner/issues/662
      id: check-release
      run: |
        if [[ ${{ github.event.release.tag_name }} != ${{ steps.latest.outputs.release }} ]]; then
          echo "This isn't the latest release, so we won't update the major version tag"
          echo "is-latest-release=false" >> $GITHUB_OUTPUT
        else
          echo "is-latest-release=true" >> $GITHUB_OUTPUT
        fi

    - name: Throw an error if the tag name doesn't equal the release name
      if: ${{ steps.check-release.outputs.is-latest-release == 'true' }}
      shell: bash
      run: |
        if [[ ${{ github.event.release.tag_name }} != ${{ github.event.release.name }} ]]; then
          echo "Tag name (${{ github.event.release.tag_name }}) and release name (${{ github.event.release.name }}) must be the same"
          exit 1
        fi

    - name: Throw an error if the release name isn't semver in the format v1.2.3
      if: ${{ steps.check-release.outputs.is-latest-release == 'true' }}
      shell: bash
      # note GitHub generally wants versions prefixed with v; see
      # https://docs.github.com/en/actions/creating-actions/about-custom-actions#using-tags-for-release-management
      run: |
        if [[ ! ${{ github.event.release.name }} =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Release name (${{ github.event.release.name }}) must be semver, in the format v1.2.3"
          echo "Note GitHub generally wants version prefixed with v; see"
          echo "https://docs.github.com/en/actions/creating-actions/about-custom-actions#using-tags-for-release-management"
          exit 1
        fi

    - name: Get the prefixed major and previous version of the release
      if: ${{ steps.check-release.outputs.is-latest-release == 'true' }}
      shell: bash
      # Release name will be something like v1.2.3, and we want to get v1 and
      # v1.2.2
      # https://stackoverflow.com/questions/4168371/how-can-i-remove-all-text-after-a-character-in-bash
      id: version
      run: |
        PREFIXED_MAJOR=$(echo ${{ github.event.release.name }} | cut -f1 -d".")
        echo "prefixed-major=$PREFIXED_MAJOR" >> $GITHUB_OUTPUT

        MAJOR=$(echo $PREFIXED_MAJOR | cut -c2-) # remove the v
        MINOR=$(echo ${{ github.event.release.name }} | cut -f2 -d".")
        PATCH=$(echo ${{ github.event.release.name }} | cut -f3 -d".")

        if [[ ${{ github.event.release.name }} == 'v0.1.0' ]]; then
          echo "previous-version-regex=^v0.1.0$" >> $GITHUB_OUTPUT
        elif [[ $PATCH != 0 ]]; then
          echo "previous-version-regex=^v$MAJOR\.$MINOR\.$((PATCH - 1))$" >> $GITHUB_OUTPUT
        elif [[ $MINOR != 0 ]]; then
          echo "previous-version-regex=^v$MAJOR\.$((MINOR - 1))\.\d+$" >> $GITHUB_OUTPUT
        elif [[ $MAJOR != 0 ]]; then
          echo "previous-version-regex=^v$((MAJOR - 1))\.\d+\.\d+$" >> $GITHUB_OUTPUT
        else
          echo "Fatal error: release is v0.0.0, which should never happen"
          exit 1
        fi

    - name:
        Throw an error if this version is an unallowed change from the previous
        version
      if: ${{ steps.check-release.outputs.is-latest-release == 'true' }}
      shell: bash
      # we want to get a list of all releases, to see if the previous version
      # exists
      # https://docs.github.com/en/rest/reference/repos#list-releases
      id: releases
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        regex=${{ steps.version.outputs.previous-version-regex }}
        page=1

        # max per_page is 100, so we need to loop through pages
        # https://docs.github.com/en/rest/releases/releases?apiVersion=2022-11-28#list-releases
        while true; do
          res=$( \
            gh api \
            -X GET \
            -H "Accept: application/vnd.github+json" \
            repos/${{ github.repository }}/releases \
            -f "per_page=2" \
            -f "page=$page" \
          )

          list=$(echo $res | jq -r '.[].tag_name')

          for version in $list; do
            if [[ $version =~ $regex ]]; then
              exit 0
            fi
          done

          if [[ $res == '[]' ]]; then
            # replace \d+ with * in the regex, so it's easier to read
            # also remove leading ^ and trailing $, since they're not needed
            pattern=$(echo $regex | sed 's/\\d\+/\*/g' | sed 's/^.\(.*\).$/\1/')

            echo "Version ${{ github.event.release.name }} is unallowed. For this version to be valid, the previous version had to match the pattern $pattern, but no such version matching that pattern exists"
            exit 1
          fi

          page=$((page + 1))
        done

    - name: Checkout
      if: ${{ steps.check-release.outputs.is-latest-release == 'true' }}
      uses: actions/checkout@v3

    - name: Set up git
      if: ${{ steps.check-release.outputs.is-latest-release == 'true' }}
      shell: bash
      run: |
        git config user.email "tagmajorversionbot@example.com"
        git config user.name "Tag Major Version Bot"

    - name: Delete the old tag locally
      if: ${{ steps.check-release.outputs.is-latest-release == 'true' }}
      shell: bash
      # If tag doesn't exist locally, we still want to exit without failing
      run: git tag -d ${{ steps.version.outputs.prefixed-major }} || true

    - name: Create a new tag for the major version
      if: ${{ steps.check-release.outputs.is-latest-release == 'true' }}
      shell: bash
      run:
        git tag -a ${{ steps.version.outputs.prefixed-major }} -m "Major version
        ${{ steps.version.outputs.prefixed-major }}"

    - name: Delete the old tag remotely
      if: ${{ steps.check-release.outputs.is-latest-release == 'true' }}
      shell: bash
      # https://docs.github.com/en/rest/git/refs?apiVersion=2022-11-28#delete-a-reference
      # If tag doesn't exist remotely, we still want to exit without failing
      # Hence the || true
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        gh api \
        -X DELETE \
        -H "Accept: application/vnd.github+json" \
        repos/${{ github.repository }}/git/refs/tags/${{ steps.version.outputs.prefixed-major }} || true

    - name: Push a new tag remotely
      if: ${{ steps.check-release.outputs.is-latest-release == 'true' }}
      shell: bash
      run: git push -u origin ${{ steps.version.outputs.prefixed-major }}
